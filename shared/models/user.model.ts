/**
 * User Model
 * 
 * Represents a user within a circle. In our trust-based system, users are identified
 * by name only (no authentication). Each user has a unique ID and tracks when they
 * joined the circle.
 * 
 * Key concepts for Angular/Node.js beginners:
 * - TypeScript interfaces define the "shape" of data objects
 * - This acts as a contract - any User object must have these exact properties
 * - The '?' makes properties optional (like joinedAt which might be set later)
 */

export interface User {
  /** Unique identifier for the user (generated by backend) */
  id: string;
  
  /** Display name chosen by user when joining a circle */
  name: string;
  
  /** Timestamp when user joined the circle */
  joinedAt: Date;
}

/**
 * CreateUserRequest
 * 
 * Data structure for creating a new user when joining a circle.
 * This is what the frontend sends to the backend API.
 */
export interface CreateUserRequest {
  /** The display name the user wants to use in this circle */
  name: string;
}

/**
 * UserResponse
 * 
 * How user data is returned from the API to the frontend.
 * Includes additional computed properties or formatted data.
 */
export interface UserResponse extends User {
  /** Human-readable version of joinedAt date */
  joinedAtFormatted?: string;
}